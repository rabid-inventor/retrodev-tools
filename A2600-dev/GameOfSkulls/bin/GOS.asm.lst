------- FILE GOS.asm LEVEL 1 PASS 2
      1  10000 ????						; Typical first few lines in an Atari 2600 program ...
      2  10000 ????				       processor	6502
------- FILE vcs.h LEVEL 2 PASS 2
      0  10000 ????				       include	"vcs.h"
      1  10000 ????						; VCS.H
      2  10000 ????						; Version 1.06, 06/SEP/2020
      3  10000 ????
      4  10000 ????		00 6a	    VERSION_VCS =	106
      5  10000 ????
      6  10000 ????						; THIS IS *THE* "STANDARD" VCS.H
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; The latest version can be found at https://dasm-assembler.github.io/
      9  10000 ????						;
     10  10000 ????						; This file defines hardware registers and memory mapping for the
     11  10000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  10000 ????						; available at at https://dasm-assembler.github.io/
     14  10000 ????						;
     15  10000 ????						; Many thanks to the people who have contributed. If you find an issue with the
     16  10000 ????						; contents, or would like ot add something, please report as an issue at...
     17  10000 ????						; https://github.com/dasm-assembler/dasm/issues
     18  10000 ????
     19  10000 ????						;
     20  10000 ????						; Latest Revisions...
     21  10000 ????						; 1.06  05/SEP/2020	 Modified header/license and links to new versions
     22  10000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     23  10000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     24  10000 ????						;			    This will allow conditional code to verify VCS.H being
     25  10000 ????						;			    used for code assembly.
     26  10000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     27  10000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     28  10000 ????						;			 mirrored reading/writing differences.	This is more a 
     29  10000 ????						;			 readability issue, and binary compatibility with disassembled
     30  10000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     31  10000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     32  10000 ????						;			 which was broken by the use of segments in this file, as
     33  10000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     34  10000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     35  10000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     36  10000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     37  10000 ????						;						   it is safe to leave it undefined, and the base address will
     38  10000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     39  10000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     40  10000 ????						;			  - register definitions are now generated through assignment
     41  10000 ????						;			    in uninitialised segments.	This allows a changeable base
     42  10000 ????						;			    address architecture.
     43  10000 ????						; 1.0	22/MAR/2003		Initial release
     44  10000 ????
     45  10000 ????
     46  10000 ????						;-------------------------------------------------------------------------------
     47  10000 ????
     48  10000 ????						; TIA_BASE_ADDRESS
     49  10000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     50  10000 ????						; Normally 0, the base address should (externally, before including this file)
     51  10000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     52  10000 ????						; The reason is that this bankswitching scheme treats any access to locations
     53  10000 ????						; < $40 as a bankswitch.
     54  10000 ????
     55  10000 ????			   -	       IFNCONST	TIA_BASE_ADDRESS
     56  10000 ????			   -TIA_BASE_ADDRESS =	0
     57  10000 ????				       ENDIF
     58  10000 ????
     59  10000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     60  10000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     61  10000 ????						; *OR* by declaring the label before including this file, eg:
     62  10000 ????						; TIA_BASE_ADDRESS = $40
     63  10000 ????						;   include "vcs.h"
     64  10000 ????
     65  10000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     66  10000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     67  10000 ????						; for the mirrored ROM hardware registers.
     68  10000 ????
     69  10000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     70  10000 ????						; using the -D command-line switch, as required.  If the addresses are not defined, 
     71  10000 ????						; they defaut to the TIA_BASE_ADDRESS.
     72  10000 ????
     73  10000 ????			   -	       IFNCONST	TIA_BASE_READ_ADDRESS
     74  10000 ????			   -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     75  10000 ????				       ENDIF
     76  10000 ????
     77  10000 ????			   -	       IFNCONST	TIA_BASE_WRITE_ADDRESS
     78  10000 ????			   -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     79  10000 ????				       ENDIF
     80  10000 ????
     81  10000 ????						;-------------------------------------------------------------------------------
     82  10000 ????
     83 U002d ????				      SEG.U	TIA_REGISTERS_WRITE
     84 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     85 U0000
     86 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     87 U0000
     88 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     89 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     90 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     91 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     92 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     93 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     94 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     95 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     96 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     97 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
     98 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
     99 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    100 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    101 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    102 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    103 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    104 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    105 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    106 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    107 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    108 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    109 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    110 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    111 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    112 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    113 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    114 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    115 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    116 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    117 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    118 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    119 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    120 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    121 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    122 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    123 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    124 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    125 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    126 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    127 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    128 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    129 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    130 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    131 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    132 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    133 U002d
    134 U002d							;-------------------------------------------------------------------------------
    135 U002d
    136 U000e ????				      SEG.U	TIA_REGISTERS_READ
    137 U0000					      ORG	TIA_BASE_READ_ADDRESS
    138 U0000
    139 U0000							;											bit 7	 bit 6
    140 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    141 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    142 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    143 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    144 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    145 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    146 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    147 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    148 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    149 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    150 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    151 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    152 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    153 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    154 U000e
    155 U000e							;-------------------------------------------------------------------------------
    156 U000e
    157 U0298 ????				      SEG.U	RIOT
    158 U0280					      ORG	$280
    159 U0280
    160 U0280							; RIOT MEMORY MAP
    161 U0280
    162 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    163 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    164 U0281
    165 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    166 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    167 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    168 U0284		       00	   INTIM      ds	1	; $284		Timer output
    169 U0285
    170 U0285		       00	   TIMINT     ds	1	; $285
    171 U0286
    172 U0286							; Unused/undefined registers ($285-$294)
    173 U0286
    174 U0286		       00		      ds	1	; $286
    175 U0287		       00		      ds	1	; $287
    176 U0288		       00		      ds	1	; $288
    177 U0289		       00		      ds	1	; $289
    178 U028a		       00		      ds	1	; $28A
    179 U028b		       00		      ds	1	; $28B
    180 U028c		       00		      ds	1	; $28C
    181 U028d		       00		      ds	1	; $28D
    182 U028e		       00		      ds	1	; $28E
    183 U028f		       00		      ds	1	; $28F
    184 U0290		       00		      ds	1	; $290
    185 U0291		       00		      ds	1	; $291
    186 U0292		       00		      ds	1	; $292
    187 U0293		       00		      ds	1	; $293
    188 U0294
    189 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    190 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    191 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    192 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    193 U0298
    194 U0298							;-------------------------------------------------------------------------------
    195 U0298							; The following required for back-compatibility with code which does not use
    196 U0298							; segments.
    197 U0298
    198  10000 ????				       SEG
    199  10000 ????
    200  10000 ????						; EOF
------- FILE GOS.asm
------- FILE macro.h LEVEL 2 PASS 2
      0  10000 ????				       include	"macro.h"
      1  10000 ????						; MACRO.H
      2  10000 ????						; Version 1.09, 05/SEP/2020
      3  10000 ????
      4  10000 ????		00 6d	    VERSION_MACRO =	109
      5  10000 ????
      6  10000 ????						;
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; The latest version can be found at https://dasm-assembler.github.io/
      9  10000 ????						;
     10  10000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     11  10000 ????						; It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler.
     13  10000 ????						;
     14  10000 ????						; Many thanks to the people who have contributed. If you find an issue with the
     15  10000 ????						; contents, or would like ot add something, please report as an issue at...
     16  10000 ????						; https://github.com/dasm-assembler/dasm/issues
     17  10000 ????
     18  10000 ????
     19  10000 ????						; Latest Revisions...
     20  10000 ????						; 1.09  05/SEP/2020	 - updated license/links
     21  10000 ????
     22  10000 ????						; 1.08  13/JUL/2020	 - added use of LXA to CLEAN_START
     23  10000 ????						; 1.07  19/JAN/2020	 - correction to comment VERTICAL_SYNC
     24  10000 ????						; 1.06  03/SEP/2004	 - nice revision of VERTICAL_SYNC (Edwin Blink)
     25  10000 ????						; 1.05  14/NOV/2003	 - Added VERSION_MACRO equate (which will reflect 100x version #)
     26  10000 ????						;			   This will allow conditional code to verify MACRO.H being
     27  10000 ????						;			   used for code assembly.
     28  10000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     29  10000 ????						;
     30  10000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     31  10000 ????						;
     32  10000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     33  10000 ????						;			   (standardised macro for vertical synch code)
     34  10000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added. 
     35  10000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     36  10000 ????						; 1.0	22/MAR/2003		Initial release
     37  10000 ????
     38  10000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage, 
     39  10000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     40  10000 ????						;   If you do not allow illegal opcode usage, you must include this file 
     41  10000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     42  10000 ????						;   registers and require them to be defined first).
     43  10000 ????
     44  10000 ????						; Available macros...
     45  10000 ????						;   SLEEP n		 - sleep for n cycles
     46  10000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     47  10000 ????						;   CLEAN_START	 - set machine to known state on startup
     48  10000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     49  10000 ????
     50  10000 ????						;-------------------------------------------------------------------------------
     51  10000 ????						; SLEEP duration
     52  10000 ????						; Original author: Thomas Jentzsch
     53  10000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     54  10000 ????						; useful for code where precise timing is required.
     55  10000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     56  10000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     57  10000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     58  10000 ????
     59  10000 ????				       MAC	sleep
     60  10000 ????			    .CYCLES    SET	{1}
     61  10000 ????
     62  10000 ????				       IF	.CYCLES < 2
     63  10000 ????				       ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     64  10000 ????				       ERR
     65  10000 ????				       ENDIF
     66  10000 ????
     67  10000 ????				       IF	.CYCLES & 1
     68  10000 ????				       IFNCONST	NO_ILLEGAL_OPCODES
     69  10000 ????				       nop	0
     70  10000 ????				       ELSE
     71  10000 ????				       bit	VSYNC
     72  10000 ????				       ENDIF
     73  10000 ????			    .CYCLES    SET	.CYCLES - 3
     74  10000 ????				       ENDIF
     75  10000 ????
     76  10000 ????				       REPEAT	.CYCLES / 2
     77  10000 ????				       nop
     78  10000 ????				       REPEND
     79  10000 ????				       ENDM		;usage: SLEEP n (n>1)
     80  10000 ????
     81  10000 ????						;-------------------------------------------------------------------------------
     82  10000 ????						; VERTICAL_SYNC
     83  10000 ????						; revised version by Edwin Blink -- saves bytes!
     84  10000 ????						; Inserts the code required for a proper 3 scanline vertical sync sequence
     85  10000 ????						; Note: Alters the accumulator
     86  10000 ????
     87  10000 ????						; OUT: A = 0
     88  10000 ????
     89  10000 ????				       MAC	vertical_sync
     90  10000 ????				       lda	#%1110	; each '1' bits generate a VSYNC ON line (bits 1..3)
     91  10000 ????			    .VSLP1     sta	WSYNC	; 1st '0' bit resets Vsync, 2nd '0' bit exit loop
     92  10000 ????				       sta	VSYNC
     93  10000 ????				       lsr
     94  10000 ????				       bne	.VSLP1	; branch until VYSNC has been reset
     95  10000 ????				       ENDM
     96  10000 ????
     97  10000 ????						;-------------------------------------------------------------------------------
     98  10000 ????						; CLEAN_START
     99  10000 ????						; Original author: Andrew Davie
    100  10000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
    101  10000 ????						; Sets stack pointer to $FF, and all registers to 0
    102  10000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    103  10000 ????						; Use as very first section of code on boot (ie: at reset)
    104  10000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    105  10000 ????
    106  10000 ????				       MAC	clean_start
    107  10000 ????				       sei
    108  10000 ????				       cld
    109  10000 ????
    110  10000 ????				       IFNCONST	NO_ILLEGAL_OPCODES
    111  10000 ????				       lxa	#0
    112  10000 ????				       ELSE
    113  10000 ????				       ldx	#0
    114  10000 ????				       txa
    115  10000 ????				       ENDIF
    116  10000 ????				       tay
    117  10000 ????			    .CLEAR_STACK dex
    118  10000 ????				       txs
    119  10000 ????				       pha
    120  10000 ????				       bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    121  10000 ????
    122  10000 ????				       ENDM
    123  10000 ????
    124  10000 ????						;-------------------------------------------------------
    125  10000 ????						; SET_POINTER
    126  10000 ????						; Original author: Manuel Rotschkar
    127  10000 ????						;
    128  10000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    129  10000 ????						;
    130  10000 ????						; Usage: SET_POINTER pointer, address
    131  10000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    132  10000 ????						;
    133  10000 ????						; Note: Alters the accumulator, NZ flags
    134  10000 ????						; IN 1: 2 byte RAM location reserved for pointer
    135  10000 ????						; IN 2: absolute address
    136  10000 ????
    137  10000 ????				       MAC	set_pointer
    138  10000 ????			    .POINTER   SET	{1}
    139  10000 ????			    .ADDRESS   SET	{2}
    140  10000 ????
    141  10000 ????				       LDA	#<.ADDRESS	; Get Lowbyte of Address
    142  10000 ????				       STA	.POINTER	; Store in pointer
    143  10000 ????				       LDA	#>.ADDRESS	; Get Hibyte of Address
    144  10000 ????				       STA	.POINTER+1	; Store in pointer+1
    145  10000 ????
    146  10000 ????				       ENDM
    147  10000 ????
    148  10000 ????						;-------------------------------------------------------
    149  10000 ????						; BOUNDARY byte#
    150  10000 ????						; Original author: Denis Debro (borrowed from Bob Smith / Thomas)
    151  10000 ????						;
    152  10000 ????						; Push data to a certain position inside a page and keep count of how
    153  10000 ????						; many free bytes the programmer will have.
    154  10000 ????						;
    155  10000 ????						; eg: BOUNDARY 5    ; position at byte #5 in page
    156  10000 ????
    157  10000 ????			    .FREE_BYTES SET	0
    158  10000 ????				       MAC	boundary
    159  10000 ????				       REPEAT	256
    160  10000 ????				       IF	<. % {1} = 0
    161  10000 ????				       MEXIT
    162  10000 ????				       ELSE
    163  10000 ????			    .FREE_BYTES SET	.FREE_BYTES + 1
    164  10000 ????				       .byte	$00
    165  10000 ????				       ENDIF
    166  10000 ????				       REPEND
    167  10000 ????				       ENDM
    168  10000 ????
    169  10000 ????
    170  10000 ????						; EOF
------- FILE GOS.asm
      5  10000 ????
      6  10000 ????						;Screen defines 
      7  10000 ????		00 1e	    VERT_BLANK =	#30	; 37 - lines of processing currently 7
      8  10000 ????		00 c0	    NTSC_LINES =	#192
      9  10000 ????		00 f2	    PAL_LINES  =	#242
     10  10000 ????		00 1e	    OVERSCAN_LINES =	#30
     11  10000 ????
     12  10000 ????						;RAM usage (no more than 128 - stack)
     13  10000 ????		00 80	    LINE_COUNT =	$80
     14  10000 ????		00 81	    FRAME_COUNT =	$81
     15  10000 ????		00 82	    PLAYER_POS_X =	$82
     16  10000 ????		00 83	    PLAYER_POS_Y =	$83
     17  10000 ????		00 84	    PLAYER_POS_TUNE =	$84
     18  10000 ????		00 85	    P_SPRITE_ADD =	$85
     19  10000 ????		00 86	    NEXT_P_SPRITE =	$86
     20  10000 ????		00 87	    SPRITE_LOC =	$87
     21  10000 ????		00 88	    PF0G       =	$88
     22  10000 ????		00 89	    PF1G       =	$89
     23  10000 ????		00 90	    PF2G       =	$90
     24  10000 ????		00 91	    SPRITE1LINE =	$91
     25  10000 ????
     26  10000 ????
     27  f000					      ORG	$F000
      0  f000					      CLEAN_START
      1  f000		       78		      sei
      2  f001		       d8		      cld
      3  f002
      4  f002					      IFNCONST	NO_ILLEGAL_OPCODES
      5  f002		       ab 00		      lxa	#0
      6  f004				  -	      ELSE
      7  f004				  -	      ldx	#0
      8  f004				  -	      txa
      9  f004					      ENDIF
     10  f004		       a8		      tay
     11  f005		       ca	   .CLEAR_STACK dex
     12  f006		       9a		      txs
     13  f007		       48		      pha
     14  f008		       d0 fb		      bne	.CLEAR_STACK
     15  f00a
     29  f00a
     30  f00a							;prep sprite used to buffer sprite line into page zero ram ready for drawing cycle
     31  f00a							;y = address if sprite
     32  f00a							;x = index if sprite line
     33  f00a							;a used to move sprite 	
     34  f00a				   prepSpite1
     35  f00a		       e0 00		      cpx	#0
     36  f00c		       f0 6d		      beq	Picture1
     37  f00e		       bd 08 fa 	      lda	Sprite2,x
     38  f011		       85 86		      sta	NEXT_P_SPRITE
     39  f013		       85 1b		      sta	GRP0
     40  f015		       ca		      dex
     41  f016		       86 91		      stx	SPRITE1LINE
     42  f018		       4c 7b f0 	      jmp	Picture1
     43  f01b
     44  f01b
     45  f01b				   drawSprite1
     46  f01b		       ea		      nop
     47  f01c		       e8		      inx
     48  f01d		       e4 82		      cpx	PLAYER_POS_X
     49  f01f		       10 fa		      bpl	drawSprite1
     50  f021		       85 10		      sta	RESP0
     51  f023		       4c 57 f0 	      jmp	Sprit1rtn
     52  f026
     53  f026				   drawSprite2
     54  f026		       85 11		      sta	RESP1
     55  f028		       4c 57 f0 	      jmp	Sprit1rtn
     56  f02b
     57  f02b
     58  f02b				   StartOfFrame
     59  f02b							; Start of new frame
     60  f02b							; Start of vertical blank processing
     61  f02b
     62  f02b		       a9 00		      lda	#0
     63  f02d		       85 01		      sta	VBLANK
     64  f02f		       a9 02		      lda	#2
     65  f031		       85 00		      sta	VSYNC
     66  f033							;setting player y pos
     67  f033
     68  f033		       a6 83		      ldx	PLAYER_POS_Y
     69  f035		       e8		      inx
     70  f036		       86 83		      stx	PLAYER_POS_Y
     71  f038		       a2 14		      ldx	#20
     72  f03a		       86 82		      stx	PLAYER_POS_X
     73  f03c		       86 06		      stx	COLUP0
     74  f03e		       85 02		      sta	WSYNC	; follow sets player X possition 
     75  f040				   xpos
     76  f040		       a2 00		      ldx	#0
     77  f042				   xposloop
     78  f042							;jmp drawSprite1
     79  f042							;jmp xposloop
     80  f042
     81  f042							;stuff
     82  f042		       85 02		      sta	WSYNC
     83  f044		       a6 84		      ldx	PLAYER_POS_TUNE
     84  f046		       86 20		      stx	HMP0	;preload player fine tune possition 
     85  f048							;stuff
     86  f048		       86 2a		      stx	HMOVE
     87  f04a		       85 02		      sta	WSYNC	; 3 scanlines of VSYNC signal
     88  f04c
     89  f04c		       a9 00		      lda	#0
     90  f04e		       85 00		      sta	VSYNC
     91  f050
     92  f050
     93  f050							;------------------------------------------------
     94  f050
     95  f050							; 37 scanlines of vertical blank...
     96  f050
     97  f050
     98  f050
     99  f050
    100  f050
    101  f050
    102  f050
    103  f050		       85 02		      sta	WSYNC	;set sprite 1 possition
    104  f052		       a2 00		      ldx	#0
    105  f054		       4c 1b f0 	      jmp	drawSprite1
    106  f057				   Sprit1rtn
    107  f057
    108  f057		       85 02		      sta	WSYNC
    109  f059		       85 02		      sta	WSYNC
    110  f05b		       85 02		      sta	WSYNC
    111  f05d		       85 02		      sta	WSYNC
    112  f05f		       a2 00		      ldx	#0
    113  f061				   VerticalBlank
    114  f061		       85 02		      sta	WSYNC
    115  f063
    116  f063							; stuff can be done here no more than 70 machine cycles
    117  f063
    118  f063		       e8		      inx
    119  f064		       e0 1e		      cpx	#VERT_BLANK
    120  f066		       d0 f9		      bne	VerticalBlank
    121  f068
    122  f068							;------------------------------------------------
    123  f068
    124  f068							; Do 192 scanlines of color-changing (our picture)
    125  f068
    126  f068		       a2 0c		      ldx	#12
    127  f06a		       86 09		      stx	COLUBK
    128  f06c		       a2 00		      ldx	#0	; this counts our scanline number
    129  f06e
    130  f06e
    131  f06e							;------------------screen update routunes (tight timing)-----------------
    132  f06e				   Picture
    133  f06e
    134  f06e
    135  f06e		       86 80		      stx	LINE_COUNT
    136  f070		       a9 00		      lda	#0
    137  f072		       85 1b		      sta	GRP0
    138  f074		       85 02		      sta	WSYNC	; wait till end of scanline
    139  f076							; I can do stuff here but not much 22 cpu cycles
    140  f076							;check if line has sprite or next sprite
    141  f076							;ldy Sprite2 ; load address od sprite
    142  f076		       a6 91		      ldx	SPRITE1LINE	;3
    143  f078		       4c 0a f0 	      jmp	prepSpite1	;3
    144  f07b				   Picture1
    145  f07b		       a6 80		      ldx	LINE_COUNT
    146  f07d		       e4 83		      cpx	PLAYER_POS_Y
    147  f07f		       d0 07		      bne	PictureEOL
    148  f081		       a9 08		      lda	#8
    149  f083		       85 91		      sta	SPRITE1LINE
    150  f085
    151  f085		       4c 88 f0 	      jmp	PictureEOL
    152  f088
    153  f088
    154  f088							;do this at the end  
    155  f088				   PictureEOL
    156  f088		       a6 80		      ldx	LINE_COUNT
    157  f08a		       e8		      inx
    158  f08b		       e0 f2		      cpx	#PAL_LINES	;cycle counting
    159  f08d		       d0 df		      bne	Picture
    160  f08f
    161  f08f
    162  f08f							;--------------------------------------------	     
    163  f08f							;--------------------------------------------
    164  f08f
    165  f08f		       a9 42		      lda	#%01000010
    166  f091
    167  f091		       85 01		      sta	VBLANK	; end of screen - enter blanking
    168  f093
    169  f093
    170  f093
    171  f093							; 30 scanlines of overscan...
    172  f093
    173  f093
    174  f093
    175  f093		       a2 00		      ldx	#0
    176  f095
    177  f095				   Overscan
    178  f095		       85 02		      sta	WSYNC
    179  f097
    180  f097		       e8		      inx
    181  f098
    182  f098		       e0 1e		      cpx	#OVERSCAN_LINES
    183  f09a
    184  f09a		       d0 f9		      bne	Overscan
    185  f09c
    186  f09c
    187  f09c
    188  f09c
    189  f09c
    190  f09c
    191  f09c
    192  f09c
    193  f09c
    194  f09c				   ----
    195  f09c
    196  f09c		       4c 2b f0 	      jmp	StartOfFrame	; return to begining of the frame
    197  f09f
    198  fa00					      ORG	$FA00
    199  fa00							;Created using Atari Dev Studio
    200  fa00							;assembly format (bottom to top)
    201  fa00
    202  fa00				   skullfwd
    203  fa00		       00		      .byte.b	%00000000	;
    204  fa01		       54		      .byte.b	%01010100	;
    205  fa02		       7c		      .byte.b	%01111100	;
    206  fa03		       6c		      .byte.b	%01101100	;
    207  fa04		       ee		      .byte.b	%11101110	;
    208  fa05		       92		      .byte.b	%10010010	;
    209  fa06		       92		      .byte.b	%10010010	;
    210  fa07		       7c		      .byte.b	%01111100	;
    211  fa08				   Sprite2
    212  fa08		       00		      .byte.b	%00000000	;
    213  fa09		       54		      .byte.b	%01010100	;
    214  fa0a		       7c		      .byte.b	%01111100	;
    215  fa0b		       6c		      .byte.b	%01101100	;
    216  fa0c		       fe		      .byte.b	%11111110	;
    217  fa0d		       92		      .byte.b	%10010010	;
    218  fa0e		       92		      .byte.b	%10010010	;
    219  fa0f		       7c		      .byte.b	%01111100	;
    220  fa10				   Sprite3
    221  fa10		       00		      .byte.b	%00000000	;
    222  fa11		       54		      .byte.b	%01010100	;
    223  fa12		       7c		      .byte.b	%01111100	;
    224  fa13		       6c		      .byte.b	%01101100	;
    225  fa14		       fe		      .byte.b	%11111110	;
    226  fa15		       92		      .byte.b	%10010010	;
    227  fa16		       92		      .byte.b	%10010010	;
    228  fa17		       7c		      .byte.b	%01111100	;
    229  fa18				   Sprite4
    230  fa18		       00		      .byte.b	%00000000	;
    231  fa19		       50		      .byte.b	%01010000	;
    232  fa1a		       7b		      .byte.b	%01111011	;
    233  fa1b		       58		      .byte.b	%01011000	;
    234  fa1c		       dc		      .byte.b	%11011100	;
    235  fa1d		       ac		      .byte.b	%10101100	;
    236  fa1e		       af		      .byte.b	%10101111	;
    237  fa1f		       78		      .byte.b	%01111000	;
    238  fa20				   Sprite5
    239  fa20		       00		      .byte.b	%00000000	;
    240  fa21		       28		      .byte.b	%00101000	;
    241  fa22		       3d		      .byte.b	%00111101	;
    242  fa23		       2c		      .byte.b	%00101100	;
    243  fa24		       6e		      .byte.b	%01101110	;
    244  fa25		       56		      .byte.b	%01010110	;
    245  fa26		       57		      .byte.b	%01010111	;
    246  fa27		       3c		      .byte.b	%00111100	;
    247  fa28				   Sprite6
    248  fa28		       28		      .byte.b	%00101000	;
    249  fa29		       3d		      .byte.b	%00111101	;
    250  fa2a		       2c		      .byte.b	%00101100	;
    251  fa2b		       6e		      .byte.b	%01101110	;
    252  fa2c		       56		      .byte.b	%01010110	;
    253  fa2d		       57		      .byte.b	%01010111	;
    254  fa2e		       3c		      .byte.b	%00111100	;
    255  fa2f		       00		      .byte.b	%00000000	;
    256  fa30				   Sprite7
    257  fa30		       7f		      .byte.b	%01111111	;
    258  fa31		       88		      .byte.b	%10001000	;
    259  fa32		       90		      .byte.b	%10010000	;
    260  fa33		       6f		      .byte.b	%01101111	;
    261  fa34		       90		      .byte.b	%10010000	;
    262  fa35		       12		      .byte.b	%00010010	;
    263  fa36		       14		      .byte.b	%00010100	;
    264  fa37		       ef		      .byte.b	%11101111	;
    265  fa38
    266  fa38
    267  fa38					      seg
    268  fffa					      ORG	$FFFA
    269  fffa		       00 f0		      .word.w	$F000
    270  fffc		       00 f0		      .word.w	$F000
    271  fffe		       00 f0		      .word.w	$F000
