------- FILE num.asm LEVEL 1 PASS 2
      1  10000 ????						; Typical first few lines in an Atari 2600 program ...
      2  10000 ????				       processor	6502
------- FILE vcs.h LEVEL 2 PASS 2
      0  10000 ????				       include	"vcs.h"
      1  10000 ????						; VCS.H
      2  10000 ????						; Version 1.06, 06/SEP/2020
      3  10000 ????
      4  10000 ????		00 6a	    VERSION_VCS =	106
      5  10000 ????
      6  10000 ????						; THIS IS *THE* "STANDARD" VCS.H
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; The latest version can be found at https://dasm-assembler.github.io/
      9  10000 ????						;
     10  10000 ????						; This file defines hardware registers and memory mapping for the
     11  10000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  10000 ????						; available at at https://dasm-assembler.github.io/
     14  10000 ????						;
     15  10000 ????						; Many thanks to the people who have contributed. If you find an issue with the
     16  10000 ????						; contents, or would like ot add something, please report as an issue at...
     17  10000 ????						; https://github.com/dasm-assembler/dasm/issues
     18  10000 ????
     19  10000 ????						;
     20  10000 ????						; Latest Revisions...
     21  10000 ????						; 1.06  05/SEP/2020	 Modified header/license and links to new versions
     22  10000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     23  10000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     24  10000 ????						;			    This will allow conditional code to verify VCS.H being
     25  10000 ????						;			    used for code assembly.
     26  10000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     27  10000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     28  10000 ????						;			 mirrored reading/writing differences.	This is more a 
     29  10000 ????						;			 readability issue, and binary compatibility with disassembled
     30  10000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     31  10000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     32  10000 ????						;			 which was broken by the use of segments in this file, as
     33  10000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     34  10000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     35  10000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     36  10000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     37  10000 ????						;						   it is safe to leave it undefined, and the base address will
     38  10000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     39  10000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     40  10000 ????						;			  - register definitions are now generated through assignment
     41  10000 ????						;			    in uninitialised segments.	This allows a changeable base
     42  10000 ????						;			    address architecture.
     43  10000 ????						; 1.0	22/MAR/2003		Initial release
     44  10000 ????
     45  10000 ????
     46  10000 ????						;-------------------------------------------------------------------------------
     47  10000 ????
     48  10000 ????						; TIA_BASE_ADDRESS
     49  10000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     50  10000 ????						; Normally 0, the base address should (externally, before including this file)
     51  10000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     52  10000 ????						; The reason is that this bankswitching scheme treats any access to locations
     53  10000 ????						; < $40 as a bankswitch.
     54  10000 ????
     55  10000 ????			   -	       IFNCONST	TIA_BASE_ADDRESS
     56  10000 ????			   -TIA_BASE_ADDRESS =	0
     57  10000 ????				       ENDIF
     58  10000 ????
     59  10000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     60  10000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     61  10000 ????						; *OR* by declaring the label before including this file, eg:
     62  10000 ????						; TIA_BASE_ADDRESS = $40
     63  10000 ????						;   include "vcs.h"
     64  10000 ????
     65  10000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     66  10000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     67  10000 ????						; for the mirrored ROM hardware registers.
     68  10000 ????
     69  10000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     70  10000 ????						; using the -D command-line switch, as required.  If the addresses are not defined, 
     71  10000 ????						; they defaut to the TIA_BASE_ADDRESS.
     72  10000 ????
     73  10000 ????			   -	       IFNCONST	TIA_BASE_READ_ADDRESS
     74  10000 ????			   -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     75  10000 ????				       ENDIF
     76  10000 ????
     77  10000 ????			   -	       IFNCONST	TIA_BASE_WRITE_ADDRESS
     78  10000 ????			   -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     79  10000 ????				       ENDIF
     80  10000 ????
     81  10000 ????						;-------------------------------------------------------------------------------
     82  10000 ????
     83 U002d ????				      SEG.U	TIA_REGISTERS_WRITE
     84 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     85 U0000
     86 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     87 U0000
     88 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     89 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     90 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     91 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     92 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     93 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     94 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     95 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     96 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     97 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
     98 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
     99 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    100 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    101 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    102 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    103 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    104 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    105 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    106 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    107 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    108 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    109 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    110 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    111 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    112 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    113 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    114 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    115 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    116 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    117 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    118 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    119 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    120 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    121 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    122 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    123 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    124 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    125 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    126 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    127 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    128 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    129 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    130 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    131 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    132 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    133 U002d
    134 U002d							;-------------------------------------------------------------------------------
    135 U002d
    136 U000e ????				      SEG.U	TIA_REGISTERS_READ
    137 U0000					      ORG	TIA_BASE_READ_ADDRESS
    138 U0000
    139 U0000							;											bit 7	 bit 6
    140 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    141 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    142 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    143 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    144 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    145 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    146 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    147 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    148 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    149 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    150 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    151 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    152 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    153 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    154 U000e
    155 U000e							;-------------------------------------------------------------------------------
    156 U000e
    157 U0298 ????				      SEG.U	RIOT
    158 U0280					      ORG	$280
    159 U0280
    160 U0280							; RIOT MEMORY MAP
    161 U0280
    162 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    163 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    164 U0281
    165 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    166 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    167 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    168 U0284		       00	   INTIM      ds	1	; $284		Timer output
    169 U0285
    170 U0285		       00	   TIMINT     ds	1	; $285
    171 U0286
    172 U0286							; Unused/undefined registers ($285-$294)
    173 U0286
    174 U0286		       00		      ds	1	; $286
    175 U0287		       00		      ds	1	; $287
    176 U0288		       00		      ds	1	; $288
    177 U0289		       00		      ds	1	; $289
    178 U028a		       00		      ds	1	; $28A
    179 U028b		       00		      ds	1	; $28B
    180 U028c		       00		      ds	1	; $28C
    181 U028d		       00		      ds	1	; $28D
    182 U028e		       00		      ds	1	; $28E
    183 U028f		       00		      ds	1	; $28F
    184 U0290		       00		      ds	1	; $290
    185 U0291		       00		      ds	1	; $291
    186 U0292		       00		      ds	1	; $292
    187 U0293		       00		      ds	1	; $293
    188 U0294
    189 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    190 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    191 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    192 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    193 U0298
    194 U0298							;-------------------------------------------------------------------------------
    195 U0298							; The following required for back-compatibility with code which does not use
    196 U0298							; segments.
    197 U0298
    198  10000 ????				       SEG
    199  10000 ????
    200  10000 ????						; EOF
------- FILE num.asm
------- FILE macro.h LEVEL 2 PASS 2
      0  10000 ????				       include	"macro.h"
      1  10000 ????						; MACRO.H
      2  10000 ????						; Version 1.09, 05/SEP/2020
      3  10000 ????
      4  10000 ????		00 6d	    VERSION_MACRO =	109
      5  10000 ????
      6  10000 ????						;
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; The latest version can be found at https://dasm-assembler.github.io/
      9  10000 ????						;
     10  10000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     11  10000 ????						; It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler.
     13  10000 ????						;
     14  10000 ????						; Many thanks to the people who have contributed. If you find an issue with the
     15  10000 ????						; contents, or would like ot add something, please report as an issue at...
     16  10000 ????						; https://github.com/dasm-assembler/dasm/issues
     17  10000 ????
     18  10000 ????
     19  10000 ????						; Latest Revisions...
     20  10000 ????						; 1.09  05/SEP/2020	 - updated license/links
     21  10000 ????
     22  10000 ????						; 1.08  13/JUL/2020	 - added use of LXA to CLEAN_START
     23  10000 ????						; 1.07  19/JAN/2020	 - correction to comment VERTICAL_SYNC
     24  10000 ????						; 1.06  03/SEP/2004	 - nice revision of VERTICAL_SYNC (Edwin Blink)
     25  10000 ????						; 1.05  14/NOV/2003	 - Added VERSION_MACRO equate (which will reflect 100x version #)
     26  10000 ????						;			   This will allow conditional code to verify MACRO.H being
     27  10000 ????						;			   used for code assembly.
     28  10000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     29  10000 ????						;
     30  10000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     31  10000 ????						;
     32  10000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     33  10000 ????						;			   (standardised macro for vertical synch code)
     34  10000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added. 
     35  10000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     36  10000 ????						; 1.0	22/MAR/2003		Initial release
     37  10000 ????
     38  10000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage, 
     39  10000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     40  10000 ????						;   If you do not allow illegal opcode usage, you must include this file 
     41  10000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     42  10000 ????						;   registers and require them to be defined first).
     43  10000 ????
     44  10000 ????						; Available macros...
     45  10000 ????						;   SLEEP n		 - sleep for n cycles
     46  10000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     47  10000 ????						;   CLEAN_START	 - set machine to known state on startup
     48  10000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     49  10000 ????
     50  10000 ????						;-------------------------------------------------------------------------------
     51  10000 ????						; SLEEP duration
     52  10000 ????						; Original author: Thomas Jentzsch
     53  10000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     54  10000 ????						; useful for code where precise timing is required.
     55  10000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     56  10000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     57  10000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     58  10000 ????
     59  10000 ????				       MAC	sleep
     60  10000 ????			    .CYCLES    SET	{1}
     61  10000 ????
     62  10000 ????				       IF	.CYCLES < 2
     63  10000 ????				       ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     64  10000 ????				       ERR
     65  10000 ????				       ENDIF
     66  10000 ????
     67  10000 ????				       IF	.CYCLES & 1
     68  10000 ????				       IFNCONST	NO_ILLEGAL_OPCODES
     69  10000 ????				       nop	0
     70  10000 ????				       ELSE
     71  10000 ????				       bit	VSYNC
     72  10000 ????				       ENDIF
     73  10000 ????			    .CYCLES    SET	.CYCLES - 3
     74  10000 ????				       ENDIF
     75  10000 ????
     76  10000 ????				       REPEAT	.CYCLES / 2
     77  10000 ????				       nop
     78  10000 ????				       REPEND
     79  10000 ????				       ENDM		;usage: SLEEP n (n>1)
     80  10000 ????
     81  10000 ????						;-------------------------------------------------------------------------------
     82  10000 ????						; VERTICAL_SYNC
     83  10000 ????						; revised version by Edwin Blink -- saves bytes!
     84  10000 ????						; Inserts the code required for a proper 3 scanline vertical sync sequence
     85  10000 ????						; Note: Alters the accumulator
     86  10000 ????
     87  10000 ????						; OUT: A = 0
     88  10000 ????
     89  10000 ????				       MAC	vertical_sync
     90  10000 ????				       lda	#%1110	; each '1' bits generate a VSYNC ON line (bits 1..3)
     91  10000 ????			    .VSLP1     sta	WSYNC	; 1st '0' bit resets Vsync, 2nd '0' bit exit loop
     92  10000 ????				       sta	VSYNC
     93  10000 ????				       lsr
     94  10000 ????				       bne	.VSLP1	; branch until VYSNC has been reset
     95  10000 ????				       ENDM
     96  10000 ????
     97  10000 ????						;-------------------------------------------------------------------------------
     98  10000 ????						; CLEAN_START
     99  10000 ????						; Original author: Andrew Davie
    100  10000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
    101  10000 ????						; Sets stack pointer to $FF, and all registers to 0
    102  10000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    103  10000 ????						; Use as very first section of code on boot (ie: at reset)
    104  10000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    105  10000 ????
    106  10000 ????				       MAC	clean_start
    107  10000 ????				       sei
    108  10000 ????				       cld
    109  10000 ????
    110  10000 ????				       IFNCONST	NO_ILLEGAL_OPCODES
    111  10000 ????				       lxa	#0
    112  10000 ????				       ELSE
    113  10000 ????				       ldx	#0
    114  10000 ????				       txa
    115  10000 ????				       ENDIF
    116  10000 ????				       tay
    117  10000 ????			    .CLEAR_STACK dex
    118  10000 ????				       txs
    119  10000 ????				       pha
    120  10000 ????				       bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    121  10000 ????
    122  10000 ????				       ENDM
    123  10000 ????
    124  10000 ????						;-------------------------------------------------------
    125  10000 ????						; SET_POINTER
    126  10000 ????						; Original author: Manuel Rotschkar
    127  10000 ????						;
    128  10000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    129  10000 ????						;
    130  10000 ????						; Usage: SET_POINTER pointer, address
    131  10000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    132  10000 ????						;
    133  10000 ????						; Note: Alters the accumulator, NZ flags
    134  10000 ????						; IN 1: 2 byte RAM location reserved for pointer
    135  10000 ????						; IN 2: absolute address
    136  10000 ????
    137  10000 ????				       MAC	set_pointer
    138  10000 ????			    .POINTER   SET	{1}
    139  10000 ????			    .ADDRESS   SET	{2}
    140  10000 ????
    141  10000 ????				       LDA	#<.ADDRESS	; Get Lowbyte of Address
    142  10000 ????				       STA	.POINTER	; Store in pointer
    143  10000 ????				       LDA	#>.ADDRESS	; Get Hibyte of Address
    144  10000 ????				       STA	.POINTER+1	; Store in pointer+1
    145  10000 ????
    146  10000 ????				       ENDM
    147  10000 ????
    148  10000 ????						;-------------------------------------------------------
    149  10000 ????						; BOUNDARY byte#
    150  10000 ????						; Original author: Denis Debro (borrowed from Bob Smith / Thomas)
    151  10000 ????						;
    152  10000 ????						; Push data to a certain position inside a page and keep count of how
    153  10000 ????						; many free bytes the programmer will have.
    154  10000 ????						;
    155  10000 ????						; eg: BOUNDARY 5    ; position at byte #5 in page
    156  10000 ????
    157  10000 ????			    .FREE_BYTES SET	0
    158  10000 ????				       MAC	boundary
    159  10000 ????				       REPEAT	256
    160  10000 ????				       IF	<. % {1} = 0
    161  10000 ????				       MEXIT
    162  10000 ????				       ELSE
    163  10000 ????			    .FREE_BYTES SET	.FREE_BYTES + 1
    164  10000 ????				       .byte	$00
    165  10000 ????				       ENDIF
    166  10000 ????				       REPEND
    167  10000 ????				       ENDM
    168  10000 ????
    169  10000 ????
    170  10000 ????						; EOF
------- FILE num.asm
      5  10000 ????
      6  10000 ????						;Display Generation Constants 
      7  10000 ????		00 1e	    VERT_BLANK =	#30	; 37 - lines of processing currently 7
      8  10000 ????		00 c0	    NTSC_LINES =	#192
      9  10000 ????		00 f2	    PAL_LINES  =	#242
     10  10000 ????		00 1e	    OVERSCAN_LINES =	#30
     11  10000 ????
     12  10000 ????						;Software Constants
     13  10000 ????		00 15	    LINES_PER_PIXEL =	21
     14  10000 ????
     15  10000 ????						;memory locations 
     16  10000 ????		00 80	    displayLines =	$80
     17  10000 ????		00 81	    PFColour   =	$81
     18  10000 ????		00 87	    lineCounter =	$87
     19  10000 ????		00 88	    scratchPad1 =	$88
     20  10000 ????
     21  10000 ????						;;;;;;;;Software entry point;;;;;;;;;;
     22  f000					      ORG	$F000
      0  f000					      CLEAN_START		; clears memory ect.
      1  f000		       78		      sei
      2  f001		       d8		      cld
      3  f002
      4  f002					      IFNCONST	NO_ILLEGAL_OPCODES
      5  f002		       ab 00		      lxa	#0
      6  f004				  -	      ELSE
      7  f004				  -	      ldx	#0
      8  f004				  -	      txa
      9  f004					      ENDIF
     10  f004		       a8		      tay
     11  f005		       ca	   .CLEAR_STACK dex
     12  f006		       9a		      txs
     13  f007		       48		      pha
     14  f008		       d0 fb		      bne	.CLEAR_STACK
     15  f00a
     24  f00a
     25  f00a		       a9 15		      lda	#LINES_PER_PIXEL
     26  f00c
     27  f00c
     28  f00c				   Main
     29  f00c		       20 1b f0 	      jsr	VerticalSync	; Jump to SubRoutine VerticalSync
     30  f00f		       20 30 f0 	      jsr	VerticalBlank	; Jump to SubRoutine VerticalBlank
     31  f012		       20 3e f0 	      jsr	Kernel	; Jump to SubRoutine Kernel
     32  f015		       20 7a f0 	      jsr	OverScan	; Jump to SubRoutine OverScan
     33  f018		       4c 0c f0 	      jmp	Main	; JuMP to Main
     34  f01b
     35  f01b				   VerticalSync
     36  f01b		       a9 02		      lda	#2	; LoaD Accumulator with 2 so D1=1
     37  f01d		       85 02		      sta	WSYNC	; Wait for SYNC (halts CPU until end of scanline)
     38  f01f
     39  f01f		       85 00		      sta	VSYNC	; Accumulator D1=1, turns on Vertical Sync signal
     40  f021		       a5 88		      lda	scratchPad1	; loading PF colour 
     41  f023		       85 08		      sta	COLUPF	; store PF colour
     42  f025		       e6 88		      inc	scratchPad1
     43  f027		       85 02		      sta	WSYNC	; Wait for Sync - halts CPU until end of 1st scanline of VSYNC    
     44  f029
     45  f029
     46  f029		       a9 00		      lda	#0	; LoaD Accumulator with 0 so D1=0
     47  f02b		       85 02		      sta	WSYNC	; wait until end of 3rd scanline of VSYNC
     48  f02d		       85 00		      sta	VSYNC	; Accumulator D1=0, turns off Vertical Sync signal
     49  f02f		       60		      rts		; ReTurn from Subroutine
     50  f030
     51  f030				   VerticalBlank
     52  f030		       85 02		      sta	WSYNC	; Wait for SYNC (halts CPU until end of scanline)
     53  f032		       85 02		      sta	WSYNC	; Wait for SYNC (halts CPU until end of scanline)  
     54  f034
     55  f034		       a2 22		      ldx	#34	; LoaD X with 37 - 3 of the above WSYNCs
     56  f036		       a0 00		      ldy	#0
     57  f038
     58  f038				   vbLoop
     59  f038		       85 02		      sta	WSYNC	; Wait for SYNC (halts CPU until end of scanline)
     60  f03a		       ca		      dex		; DEcrement X by 1
     61  f03b		       d0 fb		      bne	vbLoop	; Branch if Not Equal to 0
     62  f03d		       60		      rts		; ReTurn from Subroutine
     63  f03e
     64  f03e				   Kernel
     65  f03e							; turn on the display
     66  f03e		       85 02		      sta	WSYNC	; Wait for SYNC (halts CPU until end of scanline)
     67  f040		       a9 00		      lda	#0	; LoaD Accumulator with 0 so D1=0
     68  f042		       85 01		      sta	VBLANK	; Accumulator D1=1, turns off Vertical Blank signal (image output on)
     69  f044		       85 02		      sta	WSYNC	; Wait for SYNC (halts CPU until end of scanline)
     70  f046		       a2 f2		      ldx	#PAL_LINES	; Load X with 192 lines of the PAL display
     71  f048		       86 80		      stx	displayLines	; stores current line if kernel for later recall
     72  f04a
     73  f04a		       a2 15		      ldx	#LINES_PER_PIXEL	; load X reg with value of lines per pixel
     74  f04c
     75  f04c				   KernelLoop
     76  f04c
     77  f04c		       85 02		      sta	WSYNC	; Wait for SYNC (halts CPU until end of scanline)
     78  f04e
     79  f04e							;Begining of visible lines 
     80  f04e		       ca		      dex		;decrement lines per pixel
     81  f04f		       10 03		      bpl	drawPF2	;skip next instruction id more lines need to be drawn
     82  f051		       c8		      iny		;move y index to next PF pixel
     83  f052		       a2 14		      ldx	#20	;reset pixel line count 
     84  f054
     85  f054
     86  f054				   drawPF2
     87  f054							;draw first half of the PF can be done any time before visable drawing  
     88  f054		       b9 92 f0 	      lda	PFG0,y
     89  f057		       85 0d		      sta	PF0
     90  f059		       b9 9d f0 	      lda	PFG1,y
     91  f05c		       85 0e		      sta	PF1
     92  f05e		       b9 a8 f0 	      lda	PFG2,y
     93  f061		       85 0f		      sta	PF2
     94  f063
     95  f063
     96  f063		       ea		      nop		;spare time to cycle past Drawing PF
     97  f064		       ea		      nop		;spare time to cycle past Drawing PF 
     98  f065		       ea		      nop		;spare time to cycle past Drawing PF
     99  f066							;nop		  ;spare time to cycle past Drawing PF
    100  f066
    101  f066
    102  f066							;draw first half of the PF can be done imendiatly are PF0 has been drawn to display 
    103  f066		       b9 b3 f0 	      lda	PFG3,y
    104  f069		       85 0d		      sta	PF0
    105  f06b		       b9 be f0 	      lda	PFG4,y
    106  f06e		       85 0e		      sta	PF1
    107  f070		       b9 c9 f0 	      lda	PFG5,y
    108  f073		       85 0f		      sta	PF2
    109  f075
    110  f075				   KernelEndOfLine
    111  f075		       c6 80		      dec	displayLines	; DEcrement displaylines by 1
    112  f077		       d0 d3		      bne	KernelLoop	; Branch if Not Equal to 0
    113  f079		       60		      rts		; ReTurn from Subroutine
    114  f07a
    115  f07a				   OverScan
    116  f07a		       85 02		      sta	WSYNC	; Wait for SYNC (halts CPU until end of scanline)
    117  f07c		       a9 02		      lda	#2	; LoaD Accumulator with 2 so D1=1
    118  f07e		       85 01		      sta	VBLANK	; STore Accumulator to VBLANK, D1=1 turns image output off
    119  f080
    120  f080		       a9 00		      lda	#0
    121  f082		       85 0d		      sta	PF0
    122  f084		       85 0e		      sta	PF1
    123  f086		       85 0f		      sta	PF2
    124  f088		       85 02		      sta	WSYNC
    125  f08a
    126  f08a				   overcont
    127  f08a
    128  f08a		       a2 1b		      ldx	#27	; LoaD X with 27
    129  f08c				   osLoop
    130  f08c		       85 02		      sta	WSYNC	; Wait for SYNC (halts CPU until end of scanline)
    131  f08e		       ca		      dex		; DEcrement X by 1
    132  f08f		       d0 fb		      bne	osLoop	; Branch if Not Equal to 0
    133  f091		       60		      rts		; ReTurn from Subroutine
    134  f092
    135  f092
    136  f092							;;;;;;;;Sprites;;;;;;;;;;;;;;;;;
    137  f092				   PFG0
    138  f092		       ff		      .byte.b	%11111111
    139  f093		       10		      .byte.b	%00010000
    140  f094		       10		      .byte.b	%00010000
    141  f095		       10		      .byte.b	%00010000
    142  f096		       10		      .byte.b	%00010000
    143  f097		       10		      .byte.b	%00010000
    144  f098		       10		      .byte.b	%00010000
    145  f099		       10		      .byte.b	%00010000
    146  f09a		       10		      .byte.b	%00010000
    147  f09b		       10		      .byte.b	%00010000
    148  f09c		       ff		      .byte.b	%11111111
    149  f09d
    150  f09d				   PFG1
    151  f09d		       ff		      .byte.b	%11111111
    152  f09e		       00		      .byte.b	%00000000
    153  f09f		       f0		      .byte.b	%11110000
    154  f0a0		       30		      .byte.b	%00110000
    155  f0a1		       30		      .byte.b	%00110000
    156  f0a2		       f0		      .byte.b	%11110000
    157  f0a3		       c0		      .byte.b	%11000000
    158  f0a4		       c0		      .byte.b	%11000000
    159  f0a5		       f0		      .byte.b	%11110000
    160  f0a6		       00		      .byte.b	%00000000
    161  f0a7		       ff		      .byte.b	%11111111
    162  f0a8
    163  f0a8				   PFG2
    164  f0a8		       ff		      .byte.b	%11111111
    165  f0a9		       00		      .byte.b	%00000000
    166  f0aa		       0f		      .byte.b	%00001111
    167  f0ab		       0c		      .byte.b	%00001100
    168  f0ac		       0c		      .byte.b	%00001100
    169  f0ad		       0f		      .byte.b	%00001111
    170  f0ae		       0c		      .byte.b	%00001100
    171  f0af		       0c		      .byte.b	%00001100
    172  f0b0		       0f		      .byte.b	%00001111
    173  f0b1		       00		      .byte.b	%00000000
    174  f0b2		       ff		      .byte.b	%11111111
    175  f0b3				   PFG3
    176  f0b3		       ff		      .byte.b	%11111111
    177  f0b4		       00		      .byte.b	%00000000
    178  f0b5		       f0		      .byte.b	%11110000
    179  f0b6		       90		      .byte.b	%10010000
    180  f0b7		       90		      .byte.b	%10010000
    181  f0b8		       90		      .byte.b	%10010000
    182  f0b9		       90		      .byte.b	%10010000
    183  f0ba		       90		      .byte.b	%10010000
    184  f0bb		       f0		      .byte.b	%11110000
    185  f0bc		       00		      .byte.b	%00000000
    186  f0bd		       ff		      .byte.b	%11111111
    187  f0be
    188  f0be
    189  f0be				   PFG4
    190  f0be		       ff		      .byte.b	%11111111
    191  f0bf		       00		      .byte.b	%00000000
    192  f0c0		       3c		      .byte.b	%00111100
    193  f0c1		       24		      .byte.b	%00100100
    194  f0c2		       24		      .byte.b	%00100100
    195  f0c3		       24		      .byte.b	%00100100
    196  f0c4		       24		      .byte.b	%00100100
    197  f0c5		       24		      .byte.b	%00100100
    198  f0c6		       3c		      .byte.b	%00111100
    199  f0c7		       00		      .byte.b	%00000000
    200  f0c8		       ff		      .byte.b	%11111111
    201  f0c9				   PFG5
    202  f0c9		       ff		      .byte.b	%11111111
    203  f0ca		       80		      .byte.b	%10000000
    204  f0cb		       b6		      .byte.b	%10110110
    205  f0cc		       b6		      .byte.b	%10110110
    206  f0cd		       b6		      .byte.b	%10110110
    207  f0ce		       b6		      .byte.b	%10110110
    208  f0cf		       80		      .byte.b	%10000000
    209  f0d0		       b6		      .byte.b	%10110110
    210  f0d1		       b6		      .byte.b	%10110110
    211  f0d2		       80		      .byte.b	%10000000
    212  f0d3		       ff		      .byte.b	%11111111
    213  f0d4
    214  f0d4
    215  f0d4
    216  f0d4
    217  f0d4							;;;;;;;;;Reset vectors;;;;;;;;;;;;;
    218  f0d4					      seg
    219  fffa					      ORG	$FFFA
    220  fffa		       00 f0		      .word.w	$F000
    221  fffc		       00 f0		      .word.w	$F000
    222  fffe		       00 f0		      .word.w	$F000
